{
    "docs": [
        {
            "location": "/", 
            "text": "XQEMU\n is an open-source, cross-platform,\nlow-level system emulator for the original Xbox and Sega Chihiro, built on the\nexcellent \nQEMU\n project.\n\n\n\n\nAttention\n\n\nThis project is still early in development. At this point, the intended user\nis a \ndeveloper\n who is capable of acquiring the necessary ROM images, and\ncompiling the project from sources.\n\n\n\n\nProject Status\n\n\nAudio does not work, and graphics are slow and buggy, but progress is being\nmade! Please visit the \nissues page\n on\nGitHub for the current open and active tasks.\n\n\nCheck out the \nscreenshots\n to see the current state of\nthings, or \nclick here\n to get started running XQEMU!\n\n\nGet Involved\n\n\nIf you are interested in helping to create a functional, accurate, and\nperformant Xbox emulator, you are most welcome to contribute! There are\nopportunities for people of all skill levels to contribute. The project is\nhosted on \nGitHub\n.\n\n\nKeep up with the latest developments by chatting with us about \ndevelopment\ntopics\n on \n#xqemu\n on irc.freenode.net, or on the IRC-bridged\n\nDiscord\n server.", 
            "title": "Welcome"
        }, 
        {
            "location": "/#project-status", 
            "text": "Audio does not work, and graphics are slow and buggy, but progress is being\nmade! Please visit the  issues page  on\nGitHub for the current open and active tasks.  Check out the  screenshots  to see the current state of\nthings, or  click here  to get started running XQEMU!", 
            "title": "Project Status"
        }, 
        {
            "location": "/#get-involved", 
            "text": "If you are interested in helping to create a functional, accurate, and\nperformant Xbox emulator, you are most welcome to contribute! There are\nopportunities for people of all skill levels to contribute. The project is\nhosted on  GitHub .  Keep up with the latest developments by chatting with us about  development\ntopics  on  #xqemu  on irc.freenode.net, or on the IRC-bridged Discord  server.", 
            "title": "Get Involved"
        }, 
        {
            "location": "/screenshots/", 
            "text": "Disclaimer\n\n\nThese screenshots represent the \nabsolute best\n of what can currently be\nmade to run and is not representative of most titles.\n\n\n\n\nAll users are encouraged to help test XQEMU; and by recording screenshots, and\neven better video footage, you can help show the current state of the emulator\nand help us discover any problems. If you discover a problem, please \nreport\nit!\n\n\nThe \nJohn GodGames Emus\n channel on YouTube regularly provides several up-to-date videos of XQEMU running a large variety\nof games. You can \nsee his XQEMU playlist here\n.\n\n\nHalo: Combat Evolved\n\n\nCampaign\n\n\nNote: Debug Build, Accelerated 4x\n\n\n\n\n\nMultiplayer: Blood Gulch, Battle Creek\n\n\nNote: Debug Build, Realtime, June 20\nth\n\n\n\n\n\nJet Set Radio Future\n\n\n\n\n\nSerious Sam II\n\n\n\n\n\nCommit \n5d4058d\n. Recorded by John GodGames, thanks!\n\n\nMechassult\n\n\n\n\nTaken by MayeulC, thanks!", 
            "title": "Screenshots"
        }, 
        {
            "location": "/screenshots/#halo-combat-evolved", 
            "text": "", 
            "title": "Halo: Combat Evolved"
        }, 
        {
            "location": "/screenshots/#campaign", 
            "text": "Note: Debug Build, Accelerated 4x", 
            "title": "Campaign"
        }, 
        {
            "location": "/screenshots/#multiplayer-blood-gulch-battle-creek", 
            "text": "Note: Debug Build, Realtime, June 20 th", 
            "title": "Multiplayer: Blood Gulch, Battle Creek"
        }, 
        {
            "location": "/screenshots/#jet-set-radio-future", 
            "text": "", 
            "title": "Jet Set Radio Future"
        }, 
        {
            "location": "/screenshots/#serious-sam-ii", 
            "text": "Commit  5d4058d . Recorded by John GodGames, thanks!", 
            "title": "Serious Sam II"
        }, 
        {
            "location": "/screenshots/#mechassult", 
            "text": "Taken by MayeulC, thanks!", 
            "title": "Mechassult"
        }, 
        {
            "location": "/getting-started/", 
            "text": "Introduction\n\n\nXQEMU is a low-level, full-system emulator which emulates the actual hardware of\nthe Xbox; this means that in order to actually run XQEMU, you must have a copy\nof the stuff that a real Xbox needs when it turns on:\n\n\n\n\nThe MCPX Boot ROM image\n\n\nThe flash ROM image (aka \nBIOS\n)\n\n\nA properly-formatted hard disk drive image\n\n\nGame disc image(s)\n\n\n\n\nUnfortunately, distributing some of these items would violate copyright laws, so\nyou'll need to acquire them on your own.\n\n\n\n\nAttention\n\n\nThe XQEMU project does not endorse or promote piracy. We don't link to the\ncopyrighted files, or discuss how to acquire them. The best way to acquire\nthese files is to dump them from \nyour real, physical Xbox\n. Please don't\nask us how to get them.\n\n\n\n\nTips\n\n\nMCPX Boot ROM Image\n\n\nMD5 (mcpx_1.0.bin) = d49c52a4102f6df7bcf8d0617ac475ed\n\n\n\n\n\nIf your MCPX dump has an MD5 of \n196a5f59a13382c185636e691d6c323d\n, you dumped\nit badly and it's a couple of bytes off. It should start with 0x33 0xC0 and end\nwith 0x02 0xEE.\n\n\nFlash ROM Image (aka BIOS)\n\n\nXbox 1.0 compatible bios (cromwell, 3944, 4034, 4036, ...). You can use a retail\nbios a debug bios. Just like a real Xbox, running a retail bios will not boot\nunofficial software.\n\n\nDebug BIOS\n\n\nPeople have reported success with the 'COMPLEX 4627' modified debug bios. It's\nconvenient to note that this bios does not necessarily require a \npopulated\n\nhard disk image to load an application from DVD (though an empty drive still\nneeds to be attached), so you can skip the next step in some cases.\n\n\nv1.0.2 1M dump: MD5 (Complex_4627Debug.bin) = 19b5c6d3d42a707bba620634fe6d4baf\n\n\n\n\n\nor sometimes\n\n\n1MB dump: MD5 (complex_4627debug.bin) = e8dd61cc6abdbd06aac185e371312dc1\n\n\n\n\n\nRetail BIOS\n\n\n1M dump: MD5 (3944.bin) = e8b39b98cf775496c1c76e4f7756e6ed\n\n\n\n\n\nor sometimes\n\n\n256k dump: MD5 (3944.bin) = 542c62cb976a4993c8c5027dff9638ce\n\n\n\n\n\nHard Disk Drive Image\n\n\nYou have options:\n\n\nOption 1: Use a pre-built Xbox HDD image\n\n\nYou can use a pre-built 8G Xbox HDD image, free of any copyrighted content, and\nonly containing a dummy dashboard. \nYou can download this image from\nhere!\n\n\n\n\nNote\n\n\nBy design, this particular drive image does not contain the official Xbox\ndashboard, but instead contains only a dummy dashboard. Because of this, you\nmay see an error message when starting XQEMU with an unmodified retail BIOS\nimage due to the system failing to find a properly signed dashboard.\n\n\nIf you would like to change your dashboard (perhaps to the official retail\ndashboard, or any alternative dashboard), or copy additional files over to\nthe Xbox HDD, you can start XQEMU, using a modified BIOS image, and a disc\ncontaining an alternative dashboard. Then you can either install that\ndashboard, or connect to XQEMU using FTP to transfer your desired dashboard\nfiles to the HDD.\n\n\n\n\nOption 2: Image your real Xbox HDD\n\n\nThis is the most authentic way to do it. Unlock your drive, connect it to a\ncomputer, and \ndd\n the entire contents of the drive straight to a file. This\nfile can be used as-is with XQEMU.\n\n\nOption 3: Build a new HDD image from scratch\n\n\nYou can also create an Xbox hard-disk image using XboxHDM:\n\n\n\n\nCreate an \nxboxhdm\n cd-rom with the dashboard files\n\n\nIf xboxhdm doesn't work for you, try to set the included \"mkisofs.exe\" to run in Windows XP compatibility mode\n\n\nCreate a blank hard-disk file: \nqemu-img create -f qcow2 xbox_harddisk.qcow2 8G\n\n\nRun xboxhdm with qemu or something: \ni386-softmmu/qemu-system-i386 -hda xbox_harddisk.qcow2 -cdrom linux.iso\n\n\n\n\nBuilding XQEMU from Source\n\n\nBuilding on Windows\n\n\n\n\nTip\n\n\nIf you'd prefer to skip building from source and instead run a pre-built\nversion of XQEMU for Windows, build artifacts are now available through\n\nAppveyor\n.\n\n\n\n\nStart by installing and setting up \nMSYS2\n.\n\n\n\n\nImportant\n\n\nAfter installing MSYS2, you'll need to open \nMSYS2 MinGW 64-bit\n to\nperform building. Otherwise, you may see build failures for cc.exe.\n\n\n\n\nOnce MSYS2 has been installed, install all of the necessary packages by running:\n\n\npacman -S git python2 make autoconf automake-wrapper \\\nmingw-w64-x86_64-libtool mingw-w64-x86_64-gcc mingw-w64-x86_64-pkg-config \\\nmingw-w64-x86_64-glib2 mingw-w64-x86_64-libepoxy mingw-w64-x86_64-SDL \\\nmingw-w64-x86_64-SDL2 mingw-w64-x86_64-pixman\n\n\n\n\n\nClone the repo:\n\n\ngit clone https://github.com/xqemu/xqemu.git\n\n\n\n\n\nThen change directory:\n\n\ncd xqemu\n\n\n\n\n\nAnd build using the build script:\n\n\nsh ./build.sh\n\n\n\n\n\nBuilding on GNU/Linux\n\n\n\n\nNote\n\n\nThese instructions were tested with Ubuntu 18.04. Depending on the\nLinux distribution being used, these instructions may vary.\n\n\n\n\nFirst enable \ndeb-src\n via:\n\n\nsudo gedit /etc/apt/sources.list\n\n\n\n\n\nIn this file, uncomment first \ndeb-src\n line. Now refresh packages:\n\n\nsudo apt-get update\n\n\n\n\n\nInstall build deps:\n\n\nsudo apt-get build-dep qemu\nsudo apt-get install git libsdl2-dev libepoxy-dev\n\n\n\n\n\nThen clone the repo:\n\n\ngit clone https://github.com/xqemu/xqemu.git\n\n\n\n\n\nThen change directory:\n\n\ncd xqemu\n\n\n\n\n\nAnd build using the build script:\n\n\n./build.sh\n\n\n\n\n\nBuilding on macOS\n\n\nFirst make sure you've installed the \nHomebrew\n package\nmanager, then update and install necessary packages:\n\n\nbrew update\nbrew install libffi gettext glib pixman pkg-config autoconf pixman sdl2 libepoxy\n\n\n\n\n\nClone the repo:\n\n\ngit clone https://github.com/xqemu/xqemu.git\n\n\n\n\n\nThen change directory:\n\n\ncd xqemu\n\n\n\n\n\nAnd build using the build script:\n\n\n./build.sh\n\n\n\n\n\nLaunch XQEMU\n\n\nXQEMU is launchable via the command-line interface (though a GUI launcher is in\ndevelopment!) You can launch with the following command:\n\n\n./i386-softmmu/qemu-system-i386 \\\n    -cpu pentium3 \\\n    -machine xbox,bootrom=$MCPX \\\n    -m 64 \\\n    -bios $BIOS \\\n    -drive index=0,media=disk,file=$HDD,locked \\\n    -drive index=1,media=cdrom,file=$DISC \\\n    -usb -device usb-xbox-gamepad\n\n\n\n\n\nOf course, on Windows the executable path will have a \n.exe\n extension.\n\n\nReplace the variables \n$MCPX\n, \n$BIOS\n, \n$HDD\n, and \n$DISC\n with the appropriate\nfile paths or define them as variables in your shell.\n\n\nThe Xbox boot animation sequence can be bypassed by adding the\n\n,short-animation\n option to the \n-machine\n switch above.", 
            "title": "Getting Started"
        }, 
        {
            "location": "/getting-started/#introduction", 
            "text": "XQEMU is a low-level, full-system emulator which emulates the actual hardware of\nthe Xbox; this means that in order to actually run XQEMU, you must have a copy\nof the stuff that a real Xbox needs when it turns on:   The MCPX Boot ROM image  The flash ROM image (aka  BIOS )  A properly-formatted hard disk drive image  Game disc image(s)   Unfortunately, distributing some of these items would violate copyright laws, so\nyou'll need to acquire them on your own.   Attention  The XQEMU project does not endorse or promote piracy. We don't link to the\ncopyrighted files, or discuss how to acquire them. The best way to acquire\nthese files is to dump them from  your real, physical Xbox . Please don't\nask us how to get them.", 
            "title": "Introduction"
        }, 
        {
            "location": "/getting-started/#tips", 
            "text": "", 
            "title": "Tips"
        }, 
        {
            "location": "/getting-started/#mcpx-boot-rom-image", 
            "text": "MD5 (mcpx_1.0.bin) = d49c52a4102f6df7bcf8d0617ac475ed  If your MCPX dump has an MD5 of  196a5f59a13382c185636e691d6c323d , you dumped\nit badly and it's a couple of bytes off. It should start with 0x33 0xC0 and end\nwith 0x02 0xEE.", 
            "title": "MCPX Boot ROM Image"
        }, 
        {
            "location": "/getting-started/#flash-rom-image-aka-bios", 
            "text": "Xbox 1.0 compatible bios (cromwell, 3944, 4034, 4036, ...). You can use a retail\nbios a debug bios. Just like a real Xbox, running a retail bios will not boot\nunofficial software.", 
            "title": "Flash ROM Image (aka BIOS)"
        }, 
        {
            "location": "/getting-started/#debug-bios", 
            "text": "People have reported success with the 'COMPLEX 4627' modified debug bios. It's\nconvenient to note that this bios does not necessarily require a  populated \nhard disk image to load an application from DVD (though an empty drive still\nneeds to be attached), so you can skip the next step in some cases.  v1.0.2 1M dump: MD5 (Complex_4627Debug.bin) = 19b5c6d3d42a707bba620634fe6d4baf  or sometimes  1MB dump: MD5 (complex_4627debug.bin) = e8dd61cc6abdbd06aac185e371312dc1", 
            "title": "Debug BIOS"
        }, 
        {
            "location": "/getting-started/#retail-bios", 
            "text": "1M dump: MD5 (3944.bin) = e8b39b98cf775496c1c76e4f7756e6ed  or sometimes  256k dump: MD5 (3944.bin) = 542c62cb976a4993c8c5027dff9638ce", 
            "title": "Retail BIOS"
        }, 
        {
            "location": "/getting-started/#hard-disk-drive-image", 
            "text": "You have options:", 
            "title": "Hard Disk Drive Image"
        }, 
        {
            "location": "/getting-started/#option-1-use-a-pre-built-xbox-hdd-image", 
            "text": "You can use a pre-built 8G Xbox HDD image, free of any copyrighted content, and\nonly containing a dummy dashboard.  You can download this image from\nhere!   Note  By design, this particular drive image does not contain the official Xbox\ndashboard, but instead contains only a dummy dashboard. Because of this, you\nmay see an error message when starting XQEMU with an unmodified retail BIOS\nimage due to the system failing to find a properly signed dashboard.  If you would like to change your dashboard (perhaps to the official retail\ndashboard, or any alternative dashboard), or copy additional files over to\nthe Xbox HDD, you can start XQEMU, using a modified BIOS image, and a disc\ncontaining an alternative dashboard. Then you can either install that\ndashboard, or connect to XQEMU using FTP to transfer your desired dashboard\nfiles to the HDD.", 
            "title": "Option 1: Use a pre-built Xbox HDD image"
        }, 
        {
            "location": "/getting-started/#option-2-image-your-real-xbox-hdd", 
            "text": "This is the most authentic way to do it. Unlock your drive, connect it to a\ncomputer, and  dd  the entire contents of the drive straight to a file. This\nfile can be used as-is with XQEMU.", 
            "title": "Option 2: Image your real Xbox HDD"
        }, 
        {
            "location": "/getting-started/#option-3-build-a-new-hdd-image-from-scratch", 
            "text": "You can also create an Xbox hard-disk image using XboxHDM:   Create an  xboxhdm  cd-rom with the dashboard files  If xboxhdm doesn't work for you, try to set the included \"mkisofs.exe\" to run in Windows XP compatibility mode  Create a blank hard-disk file:  qemu-img create -f qcow2 xbox_harddisk.qcow2 8G  Run xboxhdm with qemu or something:  i386-softmmu/qemu-system-i386 -hda xbox_harddisk.qcow2 -cdrom linux.iso", 
            "title": "Option 3: Build a new HDD image from scratch"
        }, 
        {
            "location": "/getting-started/#building-xqemu-from-source", 
            "text": "", 
            "title": "Building XQEMU from Source"
        }, 
        {
            "location": "/getting-started/#building-on-windows", 
            "text": "Tip  If you'd prefer to skip building from source and instead run a pre-built\nversion of XQEMU for Windows, build artifacts are now available through Appveyor .   Start by installing and setting up  MSYS2 .   Important  After installing MSYS2, you'll need to open  MSYS2 MinGW 64-bit  to\nperform building. Otherwise, you may see build failures for cc.exe.   Once MSYS2 has been installed, install all of the necessary packages by running:  pacman -S git python2 make autoconf automake-wrapper \\\nmingw-w64-x86_64-libtool mingw-w64-x86_64-gcc mingw-w64-x86_64-pkg-config \\\nmingw-w64-x86_64-glib2 mingw-w64-x86_64-libepoxy mingw-w64-x86_64-SDL \\\nmingw-w64-x86_64-SDL2 mingw-w64-x86_64-pixman  Clone the repo:  git clone https://github.com/xqemu/xqemu.git  Then change directory:  cd xqemu  And build using the build script:  sh ./build.sh", 
            "title": "Building on Windows"
        }, 
        {
            "location": "/getting-started/#building-on-gnulinux", 
            "text": "Note  These instructions were tested with Ubuntu 18.04. Depending on the\nLinux distribution being used, these instructions may vary.   First enable  deb-src  via:  sudo gedit /etc/apt/sources.list  In this file, uncomment first  deb-src  line. Now refresh packages:  sudo apt-get update  Install build deps:  sudo apt-get build-dep qemu\nsudo apt-get install git libsdl2-dev libepoxy-dev  Then clone the repo:  git clone https://github.com/xqemu/xqemu.git  Then change directory:  cd xqemu  And build using the build script:  ./build.sh", 
            "title": "Building on GNU/Linux"
        }, 
        {
            "location": "/getting-started/#building-on-macos", 
            "text": "First make sure you've installed the  Homebrew  package\nmanager, then update and install necessary packages:  brew update\nbrew install libffi gettext glib pixman pkg-config autoconf pixman sdl2 libepoxy  Clone the repo:  git clone https://github.com/xqemu/xqemu.git  Then change directory:  cd xqemu  And build using the build script:  ./build.sh", 
            "title": "Building on macOS"
        }, 
        {
            "location": "/getting-started/#launch-xqemu", 
            "text": "XQEMU is launchable via the command-line interface (though a GUI launcher is in\ndevelopment!) You can launch with the following command:  ./i386-softmmu/qemu-system-i386 \\\n    -cpu pentium3 \\\n    -machine xbox,bootrom=$MCPX \\\n    -m 64 \\\n    -bios $BIOS \\\n    -drive index=0,media=disk,file=$HDD,locked \\\n    -drive index=1,media=cdrom,file=$DISC \\\n    -usb -device usb-xbox-gamepad  Of course, on Windows the executable path will have a  .exe  extension.  Replace the variables  $MCPX ,  $BIOS ,  $HDD , and  $DISC  with the appropriate\nfile paths or define them as variables in your shell.  The Xbox boot animation sequence can be bypassed by adding the ,short-animation  option to the  -machine  switch above.", 
            "title": "Launch XQEMU"
        }, 
        {
            "location": "/input/", 
            "text": "XQEMU currently supports three options for connecting one or more virtual\ngamepads:\n\n\n\n\nUsing an SDL2-supported input device to emulate an Xbox controller\n\n\nUsing your PC's keyboard to emulate an Xbox controller\n\n\nUsing a real Xbox controller with USB pass-thru (advanced)\n\n\n\n\nAnd like a real Xbox, you can connect multiple controllers!\n\n\nIn all cases, start by making sure you have the \n-usb\n option specified on the\nXQEMU command line.\n\n\nOption 1: Use an SDL2-supported input device\n\n\nThis method is known to work well with Xbox 360 and DualShock 4 controllers,\nwith little to no setup required (with the exception of installing any required\nplatform drivers).\n\n\nWhen starting XQEMU, simply pass in the following option:\n\n\n-device usb-xbox-gamepad-sdl,index=0\n\n\n\n\n\nIf you have multiple gamepads connected to your system, you can change the index\nof the connected device by changing \nindex=X\n accordingly.\n\n\nMultiple gamepads can be connected by specifying the line above multiple times.\n\n\nOption 2: Use your PC keyboard\n\n\nIf you do not have access to a real gamepad, you can use your PC's keyboard to\nemulate an Xbox gamepad. This works well in a pinch, and for for navigating\nthrough menus.\n\n\nWhen starting XQEMU, simply pass in the following option:\n\n\n-device usb-xbox-gamepad\n\n\n\n\n\nIf you'd like, you can combine this device with the \nusb-xbox-gamepad-sdl\n\ndevice to emulate connecting two controllers. The input can't be configured at\nthe moment but the following buttons are mapped:\n\n\n\n\n\n\n\n\nXbox\n\n\nPC Keyboard\n\n\n\n\n\n\n\n\n\n\n\n\nS\n\n\n\n\n\n\n\n\nD\n\n\n\n\n\n\n\n\nW\n\n\n\n\n\n\n\n\nE\n\n\n\n\n\n\n\n\nX\n\n\n\n\n\n\n\n\nC\n\n\n\n\n\n\n\n\nReturn\n\n\n\n\n\n\n\n\nBackspace\n\n\n\n\n\n\nDPad\n-Up\n\n\n\n\n\n\n\n\nDPad\n-Down\n\n\n\n\n\n\n\n\nDPad\n-Left\n\n\n\n\n\n\n\n\nDPad\n-Right\n\n\n\n\n\n\n\n\nLeft Trigger\n\n\nQ\n\n\n\n\n\n\nRight Trigger\n\n\nR\n\n\n\n\n\n\nLeft-Thumbstick\n-Up\n\n\nT\n\n\n\n\n\n\nLeft-Thumbstick\n-Down\n\n\nG\n\n\n\n\n\n\nLeft-Thumbstick\n-Left\n\n\nF\n\n\n\n\n\n\nLeft-Thumbstick\n-Right\n\n\nH\n\n\n\n\n\n\nLeft-Thumbstick\n-Press\n\n\nV\n\n\n\n\n\n\nRight-Thumbstick\n-Up\n\n\nI\n\n\n\n\n\n\nRight-Thumbstick\n-Down\n\n\nK\n\n\n\n\n\n\nRight-Thumbstick\n-Left\n\n\nJ\n\n\n\n\n\n\nRight-Thumbstick\n-Right\n\n\nL\n\n\n\n\n\n\nRight-Thumbstick\n-Press\n\n\nM\n\n\n\n\n\n\n\n\nOption 3: USB-passthru (advanced)\n\n\nXQEMU has the option to forward USB Devices from the host to the guest. The\ninput might be delayed, but it will support all features you'd expect. In theory\neven memory units or the communicator should work! You have 2 options to forward\nthe xbox gamepad.\n\n\nYou can either forward the hub or just the gamepad.\n\n\nTo be able to forward any of the host devices you must take the following steps:\n\n\n\n\nHave an \nadapter cable (this one has not been tested yet!)\n or \nbuild one yourself*\n\n\nHave libusb installed\n\n\nFind the VID:PID (Vendor and Product ID) of the XID-Hub and/or the internal Gamepad device\n\n\nMake sure that libusb has the necessary permissions\n\n\n\n\n\n\nImportant\n\n\nPlease do not destroy original controllers. Instead buy an adapter cable, or\na cheap break-away or extension cable. By cutting it in half you can create\n2 USB adapters: 1. USB to Xbox + 2. Xbox to USB. You can still use your\nadapters as an extension cable for most XIDs (not working with lightguns).\n\n\n\n\nOn Linux you can use \nlsusb\n for step 2. Step 3 involves adding a udev rule on\nmost linux distributions. The udev rule (/etc/udev/rules.d/999-xbox-\ngamepad.rules) for a Controller-S could look like this:\n\n\nSUBSYSTEMS==\nusb\n, ATTRS{idVendor}==\n045e\n, ATTRS{idProduct}==\n0288\n, GROUP=\nusers\n, MODE=\n660\n # Hub\nSUBSYSTEMS==\nusb\n, ATTRS{idVendor}==\n045e\n, ATTRS{idProduct}==\n0289\n, GROUP=\nusers\n, MODE=\n660\n # Gamepad\n\n\n\n\n\nHub-Forwarding\n\n\nTo forward the entire hub of the controller we simply have to forward the hub to the emulated xbox.\n\n\nExample:\n\n\n-usb -device usb-host,bus=usb-bus.0,port=3,vendorid=0x45e,productid=0x288\n\n\n\nGamepad-Forwarding\n\n\nFor Gamepad forwarding we create a virtual hub using QEMU and connect the XID gamepad device to port 2 of the emulated hub.\n\n\nExample:\n\n\n-usb -device usb-hub,bus=usb-bus.0,port=3 -device usb-host,vendorid=0x45e,productid=0x289,bus=usb-bus.0,port=3.2\n\n\n\nAdvanced Info\n\n\nAbout XID and QEMU USB\n\n\nThe Xbox uses so called \nXbox Input Devices (XID)\n.\n\n\nTo connect a device to the virtual Xbox you must specify the driver for the\nemulated USB device and the port the device should connect to.\n\n\nThe ports which can be used in XQEMU are:\n\n\n\n\n\n\n\n\nXbox Port\n\n\nXQEMU USB-Port\n\n\n\n\n\n\n\n\n\n\nPlayer 1\n\n\nbus=usb-bus.0,port=3\n\n\n\n\n\n\nPlayer 2\n\n\nbus=usb-bus.0,port=4\n\n\n\n\n\n\nPlayer 3\n\n\nbus=usb-bus.0,port=1\n\n\n\n\n\n\nPlayer 4\n\n\nbus=usb-bus.0,port=2\n\n\n\n\n\n\n\n\nThe XID is usually connected to Port 2 of the XID-hub. So if you have a hub for\nPlayer 1 at \nbus=usb-bus.0,port=3\n, your gamepad-device would connect to \nbus\n=usb-bus.0,port=3.2\n.\n\n\nTo connect multiple gamepads you can simply specify multiple \n-device\n.\n\n\nTo find out more about QEMU USB emulation you can read \nthe QEMU User\nDocumentation\n.\n\n\nEmulated XID\n\n\nThere is XID emulation in XQEMU which emulates a very basic Duke Xbox Controller\n(VID: 0x045e, PID: 0x0202).\n\n\nTo recreate the internal XID hub we use the existing QEMU \"usb-hub\" device.\nThe actual XID emulation is provided by the \"xbox-gamepad\" device.\n\n\nExample:\n\n\n-usb -device usb-hub,bus=usb-bus.0,port=3 -device usb-xbox-gamepad,bus=usb-bus.0,port=3.2", 
            "title": "Input Devices"
        }, 
        {
            "location": "/input/#option-1-use-an-sdl2-supported-input-device", 
            "text": "This method is known to work well with Xbox 360 and DualShock 4 controllers,\nwith little to no setup required (with the exception of installing any required\nplatform drivers).  When starting XQEMU, simply pass in the following option:  -device usb-xbox-gamepad-sdl,index=0  If you have multiple gamepads connected to your system, you can change the index\nof the connected device by changing  index=X  accordingly.  Multiple gamepads can be connected by specifying the line above multiple times.", 
            "title": "Option 1: Use an SDL2-supported input device"
        }, 
        {
            "location": "/input/#option-2-use-your-pc-keyboard", 
            "text": "If you do not have access to a real gamepad, you can use your PC's keyboard to\nemulate an Xbox gamepad. This works well in a pinch, and for for navigating\nthrough menus.  When starting XQEMU, simply pass in the following option:  -device usb-xbox-gamepad  If you'd like, you can combine this device with the  usb-xbox-gamepad-sdl \ndevice to emulate connecting two controllers. The input can't be configured at\nthe moment but the following buttons are mapped:     Xbox  PC Keyboard       S     D     W     E     X     C     Return     Backspace    DPad -Up     DPad -Down     DPad -Left     DPad -Right     Left Trigger  Q    Right Trigger  R    Left-Thumbstick -Up  T    Left-Thumbstick -Down  G    Left-Thumbstick -Left  F    Left-Thumbstick -Right  H    Left-Thumbstick -Press  V    Right-Thumbstick -Up  I    Right-Thumbstick -Down  K    Right-Thumbstick -Left  J    Right-Thumbstick -Right  L    Right-Thumbstick -Press  M", 
            "title": "Option 2: Use your PC keyboard"
        }, 
        {
            "location": "/input/#option-3-usb-passthru-advanced", 
            "text": "XQEMU has the option to forward USB Devices from the host to the guest. The\ninput might be delayed, but it will support all features you'd expect. In theory\neven memory units or the communicator should work! You have 2 options to forward\nthe xbox gamepad.  You can either forward the hub or just the gamepad.  To be able to forward any of the host devices you must take the following steps:   Have an  adapter cable (this one has not been tested yet!)  or  build one yourself*  Have libusb installed  Find the VID:PID (Vendor and Product ID) of the XID-Hub and/or the internal Gamepad device  Make sure that libusb has the necessary permissions    Important  Please do not destroy original controllers. Instead buy an adapter cable, or\na cheap break-away or extension cable. By cutting it in half you can create\n2 USB adapters: 1. USB to Xbox + 2. Xbox to USB. You can still use your\nadapters as an extension cable for most XIDs (not working with lightguns).   On Linux you can use  lsusb  for step 2. Step 3 involves adding a udev rule on\nmost linux distributions. The udev rule (/etc/udev/rules.d/999-xbox-\ngamepad.rules) for a Controller-S could look like this:  SUBSYSTEMS== usb , ATTRS{idVendor}== 045e , ATTRS{idProduct}== 0288 , GROUP= users , MODE= 660  # Hub\nSUBSYSTEMS== usb , ATTRS{idVendor}== 045e , ATTRS{idProduct}== 0289 , GROUP= users , MODE= 660  # Gamepad", 
            "title": "Option 3: USB-passthru (advanced)"
        }, 
        {
            "location": "/input/#hub-forwarding", 
            "text": "To forward the entire hub of the controller we simply have to forward the hub to the emulated xbox.  Example:  -usb -device usb-host,bus=usb-bus.0,port=3,vendorid=0x45e,productid=0x288", 
            "title": "Hub-Forwarding"
        }, 
        {
            "location": "/input/#gamepad-forwarding", 
            "text": "For Gamepad forwarding we create a virtual hub using QEMU and connect the XID gamepad device to port 2 of the emulated hub.  Example:  -usb -device usb-hub,bus=usb-bus.0,port=3 -device usb-host,vendorid=0x45e,productid=0x289,bus=usb-bus.0,port=3.2", 
            "title": "Gamepad-Forwarding"
        }, 
        {
            "location": "/input/#advanced-info", 
            "text": "", 
            "title": "Advanced Info"
        }, 
        {
            "location": "/input/#about-xid-and-qemu-usb", 
            "text": "The Xbox uses so called  Xbox Input Devices (XID) .  To connect a device to the virtual Xbox you must specify the driver for the\nemulated USB device and the port the device should connect to.  The ports which can be used in XQEMU are:     Xbox Port  XQEMU USB-Port      Player 1  bus=usb-bus.0,port=3    Player 2  bus=usb-bus.0,port=4    Player 3  bus=usb-bus.0,port=1    Player 4  bus=usb-bus.0,port=2     The XID is usually connected to Port 2 of the XID-hub. So if you have a hub for\nPlayer 1 at  bus=usb-bus.0,port=3 , your gamepad-device would connect to  bus\n=usb-bus.0,port=3.2 .  To connect multiple gamepads you can simply specify multiple  -device .  To find out more about QEMU USB emulation you can read  the QEMU User\nDocumentation .", 
            "title": "About XID and QEMU USB"
        }, 
        {
            "location": "/input/#emulated-xid", 
            "text": "There is XID emulation in XQEMU which emulates a very basic Duke Xbox Controller\n(VID: 0x045e, PID: 0x0202).  To recreate the internal XID hub we use the existing QEMU \"usb-hub\" device.\nThe actual XID emulation is provided by the \"xbox-gamepad\" device.  Example:  -usb -device usb-hub,bus=usb-bus.0,port=3 -device usb-xbox-gamepad,bus=usb-bus.0,port=3.2", 
            "title": "Emulated XID"
        }, 
        {
            "location": "/networking/", 
            "text": "XQEMU emulates the Xbox network controller (nvnet), and being built on top of\nQEMU's robust networking support infrastructure, provides a flexible array of\nadvanced network configuration options including:\n\n\n\n\nSocket networking, for connecting multiple running instances of XQEMU for\n  possible networked game play.\n\n\nTap networking, for bridging a physical network device for play with real\n  Xboxes or other applications.\n\n\nUser networking, for simple network use where only basic port-forwarding is\n  required.\n\n\n\n\nThis page contains some quick tips for common use cases regarding Xbox\nemulation. Additional details about networking configuration information is\navailable in the \nofficial QEMU\ndocumentation\n.\n\n\nBridged Networking\n\n\nWindows\n\n\nRequirements\n\n- \nOpenVPN TAP Driver\n (Scroll down to \u201cTap-Windows\u201d)\n\n\nInstall the prerequisites then you\u2019ll need to manually bridge your main adapter and the newly created TAP adapter. This is easily done by going to \nNetwork \n Sharing Center\n then \nChange adapter settings\n.\n\n\nThe command line options are very similar to Linux however you\u2019ll need to change the \nifname=tap0\n to what ever Windows or yourself had set the name of the new TAP adapter to be.\n\n\n-net nic,model=nvnet -net tap,ifname=\u201dEthernet 2\u201d,script=no\n\n\nIn this example the interface name is \nEthernet 2\n.\n\n\n\n\nNote\n\n\nWhen using the standalone/downloadable version of XQEMU you cannot have a space in the TAP adapter name.\n\n\n\n\nLinux\n\n\nRequirements\n\n- uml-utilities\n- bridge-utils\n\n\nBy running this script via \nsudo\n before start-up of XQEMU you\u2019ll have set-up the bridge and tap adapters that are required for networking. You will however need to modify it slightly to include the main ethernet adaptor and the user account you\u2019ll be running XQEMU on.\n\n\n#!/bin/bash\n\nbrctl addbr br0\nip addr flush dev \ninterface or eth0\n\nbrctl addif br0 \ninterface or eth0\n\ntunctl -t tap0 -u \nyouruseracc\n\nbrctl addif br0 tap0\nifconfig \ninterface or eth0\n up\nifconfig tap0 up\nifconfig br0 up\ndhclient -v br0\n\n\n\n\nOnce that runs and you don\u2019t see any errors you should be able to just run XQEMU with the additional command line option of \n-net nic,model=nvnet -net tap,ifname=tap0,script=no\n.", 
            "title": "Networking"
        }, 
        {
            "location": "/networking/#bridged-networking", 
            "text": "", 
            "title": "Bridged Networking"
        }, 
        {
            "location": "/networking/#windows", 
            "text": "Requirements \n-  OpenVPN TAP Driver  (Scroll down to \u201cTap-Windows\u201d)  Install the prerequisites then you\u2019ll need to manually bridge your main adapter and the newly created TAP adapter. This is easily done by going to  Network   Sharing Center  then  Change adapter settings .  The command line options are very similar to Linux however you\u2019ll need to change the  ifname=tap0  to what ever Windows or yourself had set the name of the new TAP adapter to be.  -net nic,model=nvnet -net tap,ifname=\u201dEthernet 2\u201d,script=no  In this example the interface name is  Ethernet 2 .   Note  When using the standalone/downloadable version of XQEMU you cannot have a space in the TAP adapter name.", 
            "title": "Windows"
        }, 
        {
            "location": "/networking/#linux", 
            "text": "Requirements \n- uml-utilities\n- bridge-utils  By running this script via  sudo  before start-up of XQEMU you\u2019ll have set-up the bridge and tap adapters that are required for networking. You will however need to modify it slightly to include the main ethernet adaptor and the user account you\u2019ll be running XQEMU on.  #!/bin/bash \nbrctl addbr br0\nip addr flush dev  interface or eth0 \nbrctl addif br0  interface or eth0 \ntunctl -t tap0 -u  youruseracc \nbrctl addif br0 tap0\nifconfig  interface or eth0  up\nifconfig tap0 up\nifconfig br0 up\ndhclient -v br0  Once that runs and you don\u2019t see any errors you should be able to just run XQEMU with the additional command line option of  -net nic,model=nvnet -net tap,ifname=tap0,script=no .", 
            "title": "Linux"
        }, 
        {
            "location": "/tips/", 
            "text": "Connect to an FTP server hosted inside XQEMU\n\n\nWriting files to your Xbox's HDD is currently a pain. It will be easy once the\nfatx driver has write capabilities, but until then you have the option of\nconnecting over FTP to a server hosted inside xqemu.\n\n\nRun xqemu as normal, but add option to forward to port 21 inside VM as follows:\n\n\n-net nic,model=nvnet -net user,hostfwd=tcp:127.0.0.1:1021-:21\n\n\n\n\n\nIt's assumed you're using Filezilla. If not, look for the respective settings in\nyour client. Fire up Filezilla and set the following options:\n\n\n\n\nFilezilla \n Settings \n Connection \n FTP \n Active mode\n\n\nActive mode IP, \"Use tho following IP address:\" 10.0.2.2\n\n\nMake sure \"Don't use external IP address on local connections.\" is NOT checked\n\n\n\n\nThen create your new \"Site\" with IP address 127.0.0.1 and port 1021. Under Transfer Settings, check Active.\n\n\nDetails for the curious\n\n\nFTP has two modes, passive and active.\n\n\nPassive mode involves the client first connecting to the server for control and\nthen again on another port other for data. The client first connects, then the\nserver gives it another address and port to connect to for data. The first\nproblem with this is that the server reports to the client the only IP address\nthat it knows (10.0.2.15) which is not correct for our needs--we need 127.0.0.1.\nThat's alright because we can override this in Filezilla. The second problem is\nthat we don't know which port the server is going to choose, so we can't forward\nit ahead of time.\n\n\nIn active mode, the client first connects to the server, then the server\nconnects to the client! The client needs to give the IP address for the server\nto connect to. By default, it will give your computer's IP address, but the\nguest cannot connect to using that IP. So instead we need to override this\nsetting and provide the IP address that the guest should connect to to actually\nconnect to the host, which is 10.0.2.2.", 
            "title": "Tips"
        }, 
        {
            "location": "/tips/#connect-to-an-ftp-server-hosted-inside-xqemu", 
            "text": "Writing files to your Xbox's HDD is currently a pain. It will be easy once the\nfatx driver has write capabilities, but until then you have the option of\nconnecting over FTP to a server hosted inside xqemu.  Run xqemu as normal, but add option to forward to port 21 inside VM as follows:  -net nic,model=nvnet -net user,hostfwd=tcp:127.0.0.1:1021-:21  It's assumed you're using Filezilla. If not, look for the respective settings in\nyour client. Fire up Filezilla and set the following options:   Filezilla   Settings   Connection   FTP   Active mode  Active mode IP, \"Use tho following IP address:\" 10.0.2.2  Make sure \"Don't use external IP address on local connections.\" is NOT checked   Then create your new \"Site\" with IP address 127.0.0.1 and port 1021. Under Transfer Settings, check Active.", 
            "title": "Connect to an FTP server hosted inside XQEMU"
        }, 
        {
            "location": "/tips/#details-for-the-curious", 
            "text": "FTP has two modes, passive and active.  Passive mode involves the client first connecting to the server for control and\nthen again on another port other for data. The client first connects, then the\nserver gives it another address and port to connect to for data. The first\nproblem with this is that the server reports to the client the only IP address\nthat it knows (10.0.2.15) which is not correct for our needs--we need 127.0.0.1.\nThat's alright because we can override this in Filezilla. The second problem is\nthat we don't know which port the server is going to choose, so we can't forward\nit ahead of time.  In active mode, the client first connects to the server, then the server\nconnects to the client! The client needs to give the IP address for the server\nto connect to. By default, it will give your computer's IP address, but the\nguest cannot connect to using that IP. So instead we need to override this\nsetting and provide the IP address that the guest should connect to to actually\nconnect to the host, which is 10.0.2.2.", 
            "title": "Details for the curious"
        }, 
        {
            "location": "/developers/", 
            "text": "Debugging Tips\n\n\n\n\nQEMU can host a gdb stub! Launch with \n-s -S\n, and with gdb run \ntarget remote localhost:1234\n\n\nProtip: You can also attach to it with \nIDA\n if you're so inclined. You can then load in a database if you export it as a IDC script!\n\n\n\n\n\n\nXQEMU can emulate a XDK serial port (which with a debug bios hosts KD, as in \nthis\n and \nthis\n)! Launch with something like \n-device lpc47m157 -serial unix:/tmp/xserial,server\n. With some effort you can wrestle the unix socket into a vm for with WinDbg. There's also a very barebones perl KD client in scripts/windpl\n\n\napitrace\n is useful for tracking down rendering bugs.\n\n\n\n\nDebugging on macOS\n\n\nIf your build of Qemu is crashing, I've found it easiest to use the Xcode\ndebugger to look at stack traces. Fire up Xcode, create a project, edit the\n\"Scheme\" to run the xqemu binary, then click the run button. Xcode has a nice\nGUI for analyzing the stack frame and looking at local variables to quickly\ntrack down bugs. You can also attach to running processes.", 
            "title": "Welcome"
        }, 
        {
            "location": "/developers/#debugging-tips", 
            "text": "QEMU can host a gdb stub! Launch with  -s -S , and with gdb run  target remote localhost:1234  Protip: You can also attach to it with  IDA  if you're so inclined. You can then load in a database if you export it as a IDC script!    XQEMU can emulate a XDK serial port (which with a debug bios hosts KD, as in  this  and  this )! Launch with something like  -device lpc47m157 -serial unix:/tmp/xserial,server . With some effort you can wrestle the unix socket into a vm for with WinDbg. There's also a very barebones perl KD client in scripts/windpl  apitrace  is useful for tracking down rendering bugs.", 
            "title": "Debugging Tips"
        }, 
        {
            "location": "/developers/#debugging-on-macos", 
            "text": "If your build of Qemu is crashing, I've found it easiest to use the Xcode\ndebugger to look at stack traces. Fire up Xcode, create a project, edit the\n\"Scheme\" to run the xqemu binary, then click the run button. Xcode has a nice\nGUI for analyzing the stack frame and looking at local variables to quickly\ntrack down bugs. You can also attach to running processes.", 
            "title": "Debugging on macOS"
        }
    ]
}